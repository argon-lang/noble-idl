[assembly: global::NobleIDL.Runtime.NobleIDLSourceFile("package nobleidl.core;\n\n@esexpr:(derive-codec)\n@java:(mapped-to \"dev.argon.esexpr.ESExpr\")\n@csharp:(mapped-to (member (member (global \"ESExpr\") \"Runtime\") \"Expr\"))\nextern type esexpr;\n\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-str: #true)\n@java:(mapped-to \"java.lang.String\")\n@csharp:(mapped-to (member (global \"System\") \"String\"))\nextern type string;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-binary: #true)\n@java:(mapped-to (array \"byte\"))\n@csharp:(mapped-to (member (member (global \"ESExpr\") \"Runtime\") \"Binary\"))\nextern type binary;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true)\n@java:(mapped-to \"java.math.BigInteger\")\n@csharp:(mapped-to (member (member (global \"System\") \"Numerics\") \"BigInteger\"))\nextern type int;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: 0)\n@java:(mapped-to (annotated \"java.math.BigInteger\" \"dev.argon.esexpr.Unsigned\"))\n@csharp:(mapped-to (member (member (global \"ESExpr\") \"Runtime\") \"Nat\"))\nextern type nat;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-bool: #true)\n@java:(mapped-to \"boolean\")\n@csharp:(mapped-to (member (global \"System\") \"Boolean\"))\nextern type bool;\n\n\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: -128 max-int: 127)\n@java:(mapped-to \"byte\")\n@csharp:(mapped-to (member (global \"System\") \"SByte\"))\nextern type i8;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: 0 max-int: 255)\n@java:(mapped-to (annotated \"byte\" \"dev.argon.esexpr.Unsigned\"))\n@csharp:(mapped-to (member (global \"System\") \"Byte\"))\nextern type u8;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: -32768 max-int: 32767)\n@java:(mapped-to \"short\")\n@csharp:(mapped-to (member (global \"System\") \"Int16\"))\nextern type i16;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: 0 max-int: 65535)\n@java:(mapped-to (annotated \"short\" \"dev.argon.esexpr.Unsigned\"))\n@csharp:(mapped-to (member (global \"System\") \"UInt16\"))\nextern type u16;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: -2147483648 max-int: 2147483647)\n@java:(mapped-to \"int\")\n@csharp:(mapped-to (member (global \"System\") \"Int32\"))\nextern type i32;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: 0 max-int: 4294967295)\n@java:(mapped-to \"int\")\n@java:(mapped-to (annotated \"int\" \"dev.argon.esexpr.Unsigned\"))\n@csharp:(mapped-to (member (global \"System\") \"UInt32\"))\nextern type u32;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: -9223372036854775808 max-int: 9223372036854775807)\n@java:(mapped-to \"long\")\n@csharp:(mapped-to (member (global \"System\") \"Int64\"))\nextern type i64;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-int: #true min-int: 0 max-int: 18446744073709551615)\n@java:(mapped-to (annotated \"long\" \"dev.argon.esexpr.Unsigned\"))\n@csharp:(mapped-to (member (global \"System\") \"UInt64\"))\nextern type u64;\n\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-float32: #true)\n@java:(mapped-to \"float\")\n@csharp:(mapped-to (member (global \"System\") \"Single\"))\nextern type f32;\n\n@esexpr:(derive-codec)\n@esexpr:(literals allow-float64: #true)\n@java:(mapped-to \"double\")\n@csharp:(mapped-to (member (global \"System\") \"Double\"))\nextern type f64;\n\n@java:(mapped-to \"void\")\n@csharp:(mapped-to (void))\nextern type unit;\n\n@esexpr:(derive-codec)\n@esexpr:(allow-vararg (type-parameter \"a\" owner: \"by-type\"))\n@esexpr:(literals\n    build-literal-from: (defined-type (qualified-name (package-name \"nobleidl\" \"core\") \"list-repr\") (type-parameter \"a\" owner: \"by-type\"))\n)\n@java:(mapped-to (apply \"java.util.List\" (type-parameter \"a\")))\n@csharp:(mapped-to (member (member (global \"ESExpr\") \"Runtime\") \"VList\" (type-parameter \"a\")))\nextern type list[a];\n\n@esexpr:(derive-codec)\n@esexpr:(constructor \"list\")\nrecord list-repr[a] {\n    @esexpr:(vararg)\n    values: list[a];\n}\n\n\n@esexpr:(derive-codec)\n@java:(mapped-to (apply \"java.util.Optional\" (type-parameter \"a\")))\n@csharp:(mapped-to (member (member (global \"ESExpr\") \"Runtime\") \"Option\" (type-parameter \"a\")))\nextern type option[a];\n\n\n@esexpr:(allow-optional (type-parameter \"a\" owner: \"by-type\"))\n@java:(mapped-to (apply \"java.util.Optional\" (type-parameter \"a\")))\n@csharp:(mapped-to (member (member (global \"ESExpr\") \"Runtime\") \"Option\" (type-parameter \"a\")))\nextern type optional-field[a];\n\n@esexpr:(derive-codec)\n@esexpr:(allow-dict (type-parameter \"a\" owner: \"by-type\"))\n@java:(mapped-to (apply \"dev.argon.esexpr.KeywordMapping\" (type-parameter \"a\")))\n@csharp:(mapped-to (member (member (global \"ESExpr\") \"Runtime\") \"VDict\" (type-parameter \"a\")))\nextern type dict[\n    @rust:(boxed-usage)\n    a,\n];\n\n")]
[assembly: global::NobleIDL.Runtime.NobleIDLPackageMapping("nobleidl.core", "NobleIDL.Runtime")]
namespace NobleIDL.Runtime
{
    [global::ESExpr.Runtime.ESExprCodec, global::ESExpr.Runtime.Constructor("list")]
    public sealed partial record ListRepr<A>
    {
        [global::ESExpr.Runtime.Vararg]
        public required global::ESExpr.Runtime.VList<A> Values { get; init; }
    }
}